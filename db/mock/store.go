// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/github-real-lb/tutor-management-web/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb github.com/github-real-lb/tutor-management-web/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/github-real-lb/tutor-management-web/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCollege mocks base method.
func (m *MockStore) CreateCollege(arg0 context.Context, arg1 string) (*db.College, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollege", arg0, arg1)
	ret0, _ := ret[0].(*db.College)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollege indicates an expected call of CreateCollege.
func (mr *MockStoreMockRecorder) CreateCollege(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollege", reflect.TypeOf((*MockStore)(nil).CreateCollege), arg0, arg1)
}

// CreateFunnel mocks base method.
func (m *MockStore) CreateFunnel(arg0 context.Context, arg1 string) (*db.Funnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFunnel", arg0, arg1)
	ret0, _ := ret[0].(*db.Funnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunnel indicates an expected call of CreateFunnel.
func (mr *MockStoreMockRecorder) CreateFunnel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunnel", reflect.TypeOf((*MockStore)(nil).CreateFunnel), arg0, arg1)
}

// CreateInvoice mocks base method.
func (m *MockStore) CreateInvoice(arg0 context.Context, arg1 db.CreateInvoiceParams) (*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", arg0, arg1)
	ret0, _ := ret[0].(*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockStoreMockRecorder) CreateInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockStore)(nil).CreateInvoice), arg0, arg1)
}

// CreateLesson mocks base method.
func (m *MockStore) CreateLesson(arg0 context.Context, arg1 db.CreateLessonParams) (*db.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLesson", arg0, arg1)
	ret0, _ := ret[0].(*db.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLesson indicates an expected call of CreateLesson.
func (mr *MockStoreMockRecorder) CreateLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLesson", reflect.TypeOf((*MockStore)(nil).CreateLesson), arg0, arg1)
}

// CreateLessonLocation mocks base method.
func (m *MockStore) CreateLessonLocation(arg0 context.Context, arg1 string) (*db.LessonLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLessonLocation", arg0, arg1)
	ret0, _ := ret[0].(*db.LessonLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLessonLocation indicates an expected call of CreateLessonLocation.
func (mr *MockStoreMockRecorder) CreateLessonLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLessonLocation", reflect.TypeOf((*MockStore)(nil).CreateLessonLocation), arg0, arg1)
}

// CreateLessonSubject mocks base method.
func (m *MockStore) CreateLessonSubject(arg0 context.Context, arg1 string) (*db.LessonSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLessonSubject", arg0, arg1)
	ret0, _ := ret[0].(*db.LessonSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLessonSubject indicates an expected call of CreateLessonSubject.
func (mr *MockStoreMockRecorder) CreateLessonSubject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLessonSubject", reflect.TypeOf((*MockStore)(nil).CreateLessonSubject), arg0, arg1)
}

// CreateLessonWithInvoicesTx mocks base method.
func (m *MockStore) CreateLessonWithInvoicesTx(arg0 context.Context, arg1 db.CreateLessonTxParams) (db.LessonWithInvoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLessonWithInvoicesTx", arg0, arg1)
	ret0, _ := ret[0].(db.LessonWithInvoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLessonWithInvoicesTx indicates an expected call of CreateLessonWithInvoicesTx.
func (mr *MockStoreMockRecorder) CreateLessonWithInvoicesTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLessonWithInvoicesTx", reflect.TypeOf((*MockStore)(nil).CreateLessonWithInvoicesTx), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreatePaymentMethod mocks base method.
func (m *MockStore) CreatePaymentMethod(arg0 context.Context, arg1 string) (*db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(*db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentMethod indicates an expected call of CreatePaymentMethod.
func (mr *MockStoreMockRecorder) CreatePaymentMethod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethod", reflect.TypeOf((*MockStore)(nil).CreatePaymentMethod), arg0, arg1)
}

// CreateReceipt mocks base method.
func (m *MockStore) CreateReceipt(arg0 context.Context, arg1 db.CreateReceiptParams) (*db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceipt", arg0, arg1)
	ret0, _ := ret[0].(*db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReceipt indicates an expected call of CreateReceipt.
func (mr *MockStoreMockRecorder) CreateReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceipt", reflect.TypeOf((*MockStore)(nil).CreateReceipt), arg0, arg1)
}

// CreateReceiptWithPaymentsTx mocks base method.
func (m *MockStore) CreateReceiptWithPaymentsTx(arg0 context.Context, arg1 db.CreateReceiptTxParams) (db.ReceiptWithPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptWithPaymentsTx", arg0, arg1)
	ret0, _ := ret[0].(db.ReceiptWithPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReceiptWithPaymentsTx indicates an expected call of CreateReceiptWithPaymentsTx.
func (mr *MockStoreMockRecorder) CreateReceiptWithPaymentsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptWithPaymentsTx", reflect.TypeOf((*MockStore)(nil).CreateReceiptWithPaymentsTx), arg0, arg1)
}

// CreateStudent mocks base method.
func (m *MockStore) CreateStudent(arg0 context.Context, arg1 db.CreateStudentParams) (*db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0, arg1)
	ret0, _ := ret[0].(*db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStoreMockRecorder) CreateStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStore)(nil).CreateStudent), arg0, arg1)
}

// DeleteCollege mocks base method.
func (m *MockStore) DeleteCollege(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollege", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollege indicates an expected call of DeleteCollege.
func (mr *MockStoreMockRecorder) DeleteCollege(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollege", reflect.TypeOf((*MockStore)(nil).DeleteCollege), arg0, arg1)
}

// DeleteFunnel mocks base method.
func (m *MockStore) DeleteFunnel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFunnel indicates an expected call of DeleteFunnel.
func (mr *MockStoreMockRecorder) DeleteFunnel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFunnel", reflect.TypeOf((*MockStore)(nil).DeleteFunnel), arg0, arg1)
}

// DeleteInvoice mocks base method.
func (m *MockStore) DeleteInvoice(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockStoreMockRecorder) DeleteInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockStore)(nil).DeleteInvoice), arg0, arg1)
}

// DeleteInvoicesByLesson mocks base method.
func (m *MockStore) DeleteInvoicesByLesson(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoicesByLesson", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoicesByLesson indicates an expected call of DeleteInvoicesByLesson.
func (mr *MockStoreMockRecorder) DeleteInvoicesByLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoicesByLesson", reflect.TypeOf((*MockStore)(nil).DeleteInvoicesByLesson), arg0, arg1)
}

// DeleteLesson mocks base method.
func (m *MockStore) DeleteLesson(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLesson", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLesson indicates an expected call of DeleteLesson.
func (mr *MockStoreMockRecorder) DeleteLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLesson", reflect.TypeOf((*MockStore)(nil).DeleteLesson), arg0, arg1)
}

// DeleteLessonLocation mocks base method.
func (m *MockStore) DeleteLessonLocation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLessonLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLessonLocation indicates an expected call of DeleteLessonLocation.
func (mr *MockStoreMockRecorder) DeleteLessonLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLessonLocation", reflect.TypeOf((*MockStore)(nil).DeleteLessonLocation), arg0, arg1)
}

// DeleteLessonSubject mocks base method.
func (m *MockStore) DeleteLessonSubject(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLessonSubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLessonSubject indicates an expected call of DeleteLessonSubject.
func (mr *MockStoreMockRecorder) DeleteLessonSubject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLessonSubject", reflect.TypeOf((*MockStore)(nil).DeleteLessonSubject), arg0, arg1)
}

// DeleteLessonWithInvoicesTx mocks base method.
func (m *MockStore) DeleteLessonWithInvoicesTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLessonWithInvoicesTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLessonWithInvoicesTx indicates an expected call of DeleteLessonWithInvoicesTx.
func (mr *MockStoreMockRecorder) DeleteLessonWithInvoicesTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLessonWithInvoicesTx", reflect.TypeOf((*MockStore)(nil).DeleteLessonWithInvoicesTx), arg0, arg1)
}

// DeletePayment mocks base method.
func (m *MockStore) DeletePayment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockStoreMockRecorder) DeletePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockStore)(nil).DeletePayment), arg0, arg1)
}

// DeletePaymentMethod mocks base method.
func (m *MockStore) DeletePaymentMethod(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentMethod indicates an expected call of DeletePaymentMethod.
func (mr *MockStoreMockRecorder) DeletePaymentMethod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethod", reflect.TypeOf((*MockStore)(nil).DeletePaymentMethod), arg0, arg1)
}

// DeletePaymentsByReceipt mocks base method.
func (m *MockStore) DeletePaymentsByReceipt(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentsByReceipt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentsByReceipt indicates an expected call of DeletePaymentsByReceipt.
func (mr *MockStoreMockRecorder) DeletePaymentsByReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentsByReceipt", reflect.TypeOf((*MockStore)(nil).DeletePaymentsByReceipt), arg0, arg1)
}

// DeleteReceipt mocks base method.
func (m *MockStore) DeleteReceipt(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReceipt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReceipt indicates an expected call of DeleteReceipt.
func (mr *MockStoreMockRecorder) DeleteReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReceipt", reflect.TypeOf((*MockStore)(nil).DeleteReceipt), arg0, arg1)
}

// DeleteReceiptWithPaymentsTx mocks base method.
func (m *MockStore) DeleteReceiptWithPaymentsTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReceiptWithPaymentsTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReceiptWithPaymentsTx indicates an expected call of DeleteReceiptWithPaymentsTx.
func (mr *MockStoreMockRecorder) DeleteReceiptWithPaymentsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReceiptWithPaymentsTx", reflect.TypeOf((*MockStore)(nil).DeleteReceiptWithPaymentsTx), arg0, arg1)
}

// DeleteStudent mocks base method.
func (m *MockStore) DeleteStudent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockStoreMockRecorder) DeleteStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockStore)(nil).DeleteStudent), arg0, arg1)
}

// GetCollege mocks base method.
func (m *MockStore) GetCollege(arg0 context.Context, arg1 int64) (*db.College, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollege", arg0, arg1)
	ret0, _ := ret[0].(*db.College)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollege indicates an expected call of GetCollege.
func (mr *MockStoreMockRecorder) GetCollege(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollege", reflect.TypeOf((*MockStore)(nil).GetCollege), arg0, arg1)
}

// GetFunnel mocks base method.
func (m *MockStore) GetFunnel(arg0 context.Context, arg1 int64) (*db.Funnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunnel", arg0, arg1)
	ret0, _ := ret[0].(*db.Funnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunnel indicates an expected call of GetFunnel.
func (mr *MockStoreMockRecorder) GetFunnel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunnel", reflect.TypeOf((*MockStore)(nil).GetFunnel), arg0, arg1)
}

// GetInvoice mocks base method.
func (m *MockStore) GetInvoice(arg0 context.Context, arg1 int64) (*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", arg0, arg1)
	ret0, _ := ret[0].(*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockStoreMockRecorder) GetInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockStore)(nil).GetInvoice), arg0, arg1)
}

// GetInvoicesByLesson mocks base method.
func (m *MockStore) GetInvoicesByLesson(arg0 context.Context, arg1 int64) ([]*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByLesson", arg0, arg1)
	ret0, _ := ret[0].([]*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByLesson indicates an expected call of GetInvoicesByLesson.
func (mr *MockStoreMockRecorder) GetInvoicesByLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByLesson", reflect.TypeOf((*MockStore)(nil).GetInvoicesByLesson), arg0, arg1)
}

// GetInvoicesByStudent mocks base method.
func (m *MockStore) GetInvoicesByStudent(arg0 context.Context, arg1 int64) ([]*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByStudent", arg0, arg1)
	ret0, _ := ret[0].([]*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByStudent indicates an expected call of GetInvoicesByStudent.
func (mr *MockStoreMockRecorder) GetInvoicesByStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByStudent", reflect.TypeOf((*MockStore)(nil).GetInvoicesByStudent), arg0, arg1)
}

// GetLesson mocks base method.
func (m *MockStore) GetLesson(arg0 context.Context, arg1 int64) (*db.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLesson", arg0, arg1)
	ret0, _ := ret[0].(*db.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLesson indicates an expected call of GetLesson.
func (mr *MockStoreMockRecorder) GetLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLesson", reflect.TypeOf((*MockStore)(nil).GetLesson), arg0, arg1)
}

// GetLessonLocation mocks base method.
func (m *MockStore) GetLessonLocation(arg0 context.Context, arg1 int64) (*db.LessonLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonLocation", arg0, arg1)
	ret0, _ := ret[0].(*db.LessonLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonLocation indicates an expected call of GetLessonLocation.
func (mr *MockStoreMockRecorder) GetLessonLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonLocation", reflect.TypeOf((*MockStore)(nil).GetLessonLocation), arg0, arg1)
}

// GetLessonSubject mocks base method.
func (m *MockStore) GetLessonSubject(arg0 context.Context, arg1 int64) (*db.LessonSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonSubject", arg0, arg1)
	ret0, _ := ret[0].(*db.LessonSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonSubject indicates an expected call of GetLessonSubject.
func (mr *MockStoreMockRecorder) GetLessonSubject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonSubject", reflect.TypeOf((*MockStore)(nil).GetLessonSubject), arg0, arg1)
}

// GetLessonWithInvoicesTx mocks base method.
func (m *MockStore) GetLessonWithInvoicesTx(arg0 context.Context, arg1 int64) (db.LessonWithInvoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonWithInvoicesTx", arg0, arg1)
	ret0, _ := ret[0].(db.LessonWithInvoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonWithInvoicesTx indicates an expected call of GetLessonWithInvoicesTx.
func (mr *MockStoreMockRecorder) GetLessonWithInvoicesTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonWithInvoicesTx", reflect.TypeOf((*MockStore)(nil).GetLessonWithInvoicesTx), arg0, arg1)
}

// GetPayment mocks base method.
func (m *MockStore) GetPayment(arg0 context.Context, arg1 int64) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockStoreMockRecorder) GetPayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockStore)(nil).GetPayment), arg0, arg1)
}

// GetPaymentMethod mocks base method.
func (m *MockStore) GetPaymentMethod(arg0 context.Context, arg1 int64) (*db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(*db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethod indicates an expected call of GetPaymentMethod.
func (mr *MockStoreMockRecorder) GetPaymentMethod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethod", reflect.TypeOf((*MockStore)(nil).GetPaymentMethod), arg0, arg1)
}

// GetPayments mocks base method.
func (m *MockStore) GetPayments(arg0 context.Context, arg1 int64) ([]*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", arg0, arg1)
	ret0, _ := ret[0].([]*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockStoreMockRecorder) GetPayments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockStore)(nil).GetPayments), arg0, arg1)
}

// GetReceipt mocks base method.
func (m *MockStore) GetReceipt(arg0 context.Context, arg1 int64) (*db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0, arg1)
	ret0, _ := ret[0].(*db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockStoreMockRecorder) GetReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockStore)(nil).GetReceipt), arg0, arg1)
}

// GetReceiptWithPaymentsTx mocks base method.
func (m *MockStore) GetReceiptWithPaymentsTx(arg0 context.Context, arg1 int64) (db.ReceiptWithPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptWithPaymentsTx", arg0, arg1)
	ret0, _ := ret[0].(db.ReceiptWithPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptWithPaymentsTx indicates an expected call of GetReceiptWithPaymentsTx.
func (mr *MockStoreMockRecorder) GetReceiptWithPaymentsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptWithPaymentsTx", reflect.TypeOf((*MockStore)(nil).GetReceiptWithPaymentsTx), arg0, arg1)
}

// GetReceiptsByStudent mocks base method.
func (m *MockStore) GetReceiptsByStudent(arg0 context.Context, arg1 db.GetReceiptsByStudentParams) ([]*db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptsByStudent", arg0, arg1)
	ret0, _ := ret[0].([]*db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptsByStudent indicates an expected call of GetReceiptsByStudent.
func (mr *MockStoreMockRecorder) GetReceiptsByStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptsByStudent", reflect.TypeOf((*MockStore)(nil).GetReceiptsByStudent), arg0, arg1)
}

// GetReceiptsWithPaymentsByStudentTx mocks base method.
func (m *MockStore) GetReceiptsWithPaymentsByStudentTx(arg0 context.Context, arg1 int64, arg2, arg3 int) (db.StudentReceiptsWithPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptsWithPaymentsByStudentTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(db.StudentReceiptsWithPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptsWithPaymentsByStudentTx indicates an expected call of GetReceiptsWithPaymentsByStudentTx.
func (mr *MockStoreMockRecorder) GetReceiptsWithPaymentsByStudentTx(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptsWithPaymentsByStudentTx", reflect.TypeOf((*MockStore)(nil).GetReceiptsWithPaymentsByStudentTx), arg0, arg1, arg2, arg3)
}

// GetStudent mocks base method.
func (m *MockStore) GetStudent(arg0 context.Context, arg1 int64) (*db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0, arg1)
	ret0, _ := ret[0].(*db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockStoreMockRecorder) GetStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockStore)(nil).GetStudent), arg0, arg1)
}

// ListColleges mocks base method.
func (m *MockStore) ListColleges(arg0 context.Context, arg1 db.ListCollegesParams) ([]*db.College, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListColleges", arg0, arg1)
	ret0, _ := ret[0].([]*db.College)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListColleges indicates an expected call of ListColleges.
func (mr *MockStoreMockRecorder) ListColleges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColleges", reflect.TypeOf((*MockStore)(nil).ListColleges), arg0, arg1)
}

// ListFunnels mocks base method.
func (m *MockStore) ListFunnels(arg0 context.Context, arg1 db.ListFunnelsParams) ([]*db.Funnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFunnels", arg0, arg1)
	ret0, _ := ret[0].([]*db.Funnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunnels indicates an expected call of ListFunnels.
func (mr *MockStoreMockRecorder) ListFunnels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunnels", reflect.TypeOf((*MockStore)(nil).ListFunnels), arg0, arg1)
}

// ListInvoices mocks base method.
func (m *MockStore) ListInvoices(arg0 context.Context, arg1 db.ListInvoicesParams) ([]*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", arg0, arg1)
	ret0, _ := ret[0].([]*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockStoreMockRecorder) ListInvoices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockStore)(nil).ListInvoices), arg0, arg1)
}

// ListLessonLocations mocks base method.
func (m *MockStore) ListLessonLocations(arg0 context.Context, arg1 db.ListLessonLocationsParams) ([]*db.LessonLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLessonLocations", arg0, arg1)
	ret0, _ := ret[0].([]*db.LessonLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessonLocations indicates an expected call of ListLessonLocations.
func (mr *MockStoreMockRecorder) ListLessonLocations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessonLocations", reflect.TypeOf((*MockStore)(nil).ListLessonLocations), arg0, arg1)
}

// ListLessonSubjects mocks base method.
func (m *MockStore) ListLessonSubjects(arg0 context.Context, arg1 db.ListLessonSubjectsParams) ([]*db.LessonSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLessonSubjects", arg0, arg1)
	ret0, _ := ret[0].([]*db.LessonSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessonSubjects indicates an expected call of ListLessonSubjects.
func (mr *MockStoreMockRecorder) ListLessonSubjects(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessonSubjects", reflect.TypeOf((*MockStore)(nil).ListLessonSubjects), arg0, arg1)
}

// ListLessons mocks base method.
func (m *MockStore) ListLessons(arg0 context.Context, arg1 db.ListLessonsParams) ([]*db.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLessons", arg0, arg1)
	ret0, _ := ret[0].([]*db.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessons indicates an expected call of ListLessons.
func (mr *MockStoreMockRecorder) ListLessons(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessons", reflect.TypeOf((*MockStore)(nil).ListLessons), arg0, arg1)
}

// ListPaymentMethods mocks base method.
func (m *MockStore) ListPaymentMethods(arg0 context.Context, arg1 db.ListPaymentMethodsParams) ([]*db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", arg0, arg1)
	ret0, _ := ret[0].([]*db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockStoreMockRecorder) ListPaymentMethods(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockStore)(nil).ListPaymentMethods), arg0, arg1)
}

// ListPayments mocks base method.
func (m *MockStore) ListPayments(arg0 context.Context, arg1 db.ListPaymentsParams) ([]*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", arg0, arg1)
	ret0, _ := ret[0].([]*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockStoreMockRecorder) ListPayments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockStore)(nil).ListPayments), arg0, arg1)
}

// ListReceipts mocks base method.
func (m *MockStore) ListReceipts(arg0 context.Context, arg1 db.ListReceiptsParams) ([]*db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReceipts", arg0, arg1)
	ret0, _ := ret[0].([]*db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceipts indicates an expected call of ListReceipts.
func (mr *MockStoreMockRecorder) ListReceipts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceipts", reflect.TypeOf((*MockStore)(nil).ListReceipts), arg0, arg1)
}

// ListStudents mocks base method.
func (m *MockStore) ListStudents(arg0 context.Context, arg1 db.ListStudentsParams) ([]*db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudents", arg0, arg1)
	ret0, _ := ret[0].([]*db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudents indicates an expected call of ListStudents.
func (mr *MockStoreMockRecorder) ListStudents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudents", reflect.TypeOf((*MockStore)(nil).ListStudents), arg0, arg1)
}

// UpdateCollege mocks base method.
func (m *MockStore) UpdateCollege(arg0 context.Context, arg1 db.UpdateCollegeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollege", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollege indicates an expected call of UpdateCollege.
func (mr *MockStoreMockRecorder) UpdateCollege(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollege", reflect.TypeOf((*MockStore)(nil).UpdateCollege), arg0, arg1)
}

// UpdateFunnel mocks base method.
func (m *MockStore) UpdateFunnel(arg0 context.Context, arg1 db.UpdateFunnelParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFunnel indicates an expected call of UpdateFunnel.
func (mr *MockStoreMockRecorder) UpdateFunnel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunnel", reflect.TypeOf((*MockStore)(nil).UpdateFunnel), arg0, arg1)
}

// UpdateInvoice mocks base method.
func (m *MockStore) UpdateInvoice(arg0 context.Context, arg1 db.UpdateInvoiceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoice indicates an expected call of UpdateInvoice.
func (mr *MockStoreMockRecorder) UpdateInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockStore)(nil).UpdateInvoice), arg0, arg1)
}

// UpdateLesson mocks base method.
func (m *MockStore) UpdateLesson(arg0 context.Context, arg1 db.UpdateLessonParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLesson", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLesson indicates an expected call of UpdateLesson.
func (mr *MockStoreMockRecorder) UpdateLesson(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLesson", reflect.TypeOf((*MockStore)(nil).UpdateLesson), arg0, arg1)
}

// UpdateLessonLocation mocks base method.
func (m *MockStore) UpdateLessonLocation(arg0 context.Context, arg1 db.UpdateLessonLocationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLessonLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLessonLocation indicates an expected call of UpdateLessonLocation.
func (mr *MockStoreMockRecorder) UpdateLessonLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLessonLocation", reflect.TypeOf((*MockStore)(nil).UpdateLessonLocation), arg0, arg1)
}

// UpdateLessonSubject mocks base method.
func (m *MockStore) UpdateLessonSubject(arg0 context.Context, arg1 db.UpdateLessonSubjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLessonSubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLessonSubject indicates an expected call of UpdateLessonSubject.
func (mr *MockStoreMockRecorder) UpdateLessonSubject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLessonSubject", reflect.TypeOf((*MockStore)(nil).UpdateLessonSubject), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockStore) UpdatePayment(arg0 context.Context, arg1 db.UpdatePaymentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockStoreMockRecorder) UpdatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockStore)(nil).UpdatePayment), arg0, arg1)
}

// UpdatePaymentMethod mocks base method.
func (m *MockStore) UpdatePaymentMethod(arg0 context.Context, arg1 db.UpdatePaymentMethodParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentMethod indicates an expected call of UpdatePaymentMethod.
func (mr *MockStoreMockRecorder) UpdatePaymentMethod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentMethod", reflect.TypeOf((*MockStore)(nil).UpdatePaymentMethod), arg0, arg1)
}

// UpdateReceipt mocks base method.
func (m *MockStore) UpdateReceipt(arg0 context.Context, arg1 db.UpdateReceiptParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceipt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReceipt indicates an expected call of UpdateReceipt.
func (mr *MockStoreMockRecorder) UpdateReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceipt", reflect.TypeOf((*MockStore)(nil).UpdateReceipt), arg0, arg1)
}

// UpdateReceiptAmount mocks base method.
func (m *MockStore) UpdateReceiptAmount(arg0 context.Context, arg1 db.UpdateReceiptAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceiptAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReceiptAmount indicates an expected call of UpdateReceiptAmount.
func (mr *MockStoreMockRecorder) UpdateReceiptAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceiptAmount", reflect.TypeOf((*MockStore)(nil).UpdateReceiptAmount), arg0, arg1)
}

// UpdateStudent mocks base method.
func (m *MockStore) UpdateStudent(arg0 context.Context, arg1 db.UpdateStudentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockStoreMockRecorder) UpdateStudent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockStore)(nil).UpdateStudent), arg0, arg1)
}
