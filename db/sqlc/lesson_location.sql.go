// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lesson_location.sql

package db

import (
	"context"
)

const createLessonLocation = `-- name: CreateLessonLocation :one
INSERT INTO lesson_locations (
  name
) VALUES (
  $1
)
RETURNING location_id, name
`

func (q *Queries) CreateLessonLocation(ctx context.Context, name string) (LessonLocation, error) {
	row := q.db.QueryRowContext(ctx, createLessonLocation, name)
	var i LessonLocation
	err := row.Scan(&i.LocationID, &i.Name)
	return i, err
}

const deleteLessonLocation = `-- name: DeleteLessonLocation :exec
DELETE FROM lesson_locations
WHERE location_id = $1
`

func (q *Queries) DeleteLessonLocation(ctx context.Context, locationID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLessonLocation, locationID)
	return err
}

const getLessonLocation = `-- name: GetLessonLocation :one
SELECT location_id, name FROM lesson_locations
WHERE location_id = $1 LIMIT 1
`

func (q *Queries) GetLessonLocation(ctx context.Context, locationID int32) (LessonLocation, error) {
	row := q.db.QueryRowContext(ctx, getLessonLocation, locationID)
	var i LessonLocation
	err := row.Scan(&i.LocationID, &i.Name)
	return i, err
}

const listLessonLocations = `-- name: ListLessonLocations :many
SELECT location_id, name FROM lesson_locations
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListLessonLocationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLessonLocations(ctx context.Context, arg ListLessonLocationsParams) ([]LessonLocation, error) {
	rows, err := q.db.QueryContext(ctx, listLessonLocations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LessonLocation
	for rows.Next() {
		var i LessonLocation
		if err := rows.Scan(&i.LocationID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLessonLocation = `-- name: UpdateLessonLocation :exec
UPDATE lesson_locations
  set name = $2
WHERE location_id = $1
`

type UpdateLessonLocationParams struct {
	LocationID int32  `json:"location_id"`
	Name       string `json:"name"`
}

func (q *Queries) UpdateLessonLocation(ctx context.Context, arg UpdateLessonLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLessonLocation, arg.LocationID, arg.Name)
	return err
}
