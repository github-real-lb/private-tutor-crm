// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lesson.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createLesson = `-- name: CreateLesson :one
INSERT INTO lessons (
  lesson_datetime, duration, location_id, subject_id, notes
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING lesson_id, lesson_datetime, duration, location_id, subject_id, notes
`

type CreateLessonParams struct {
	LessonDatetime time.Time      `json:"lesson_datetime"`
	Duration       int64          `json:"duration"`
	LocationID     int64          `json:"location_id"`
	SubjectID      int64          `json:"subject_id"`
	Notes          sql.NullString `json:"notes"`
}

func (q *Queries) CreateLesson(ctx context.Context, arg CreateLessonParams) (Lesson, error) {
	row := q.db.QueryRowContext(ctx, createLesson,
		arg.LessonDatetime,
		arg.Duration,
		arg.LocationID,
		arg.SubjectID,
		arg.Notes,
	)
	var i Lesson
	err := row.Scan(
		&i.LessonID,
		&i.LessonDatetime,
		&i.Duration,
		&i.LocationID,
		&i.SubjectID,
		&i.Notes,
	)
	return i, err
}

const deleteLesson = `-- name: DeleteLesson :exec
DELETE FROM lessons
WHERE lesson_id = $1
`

func (q *Queries) DeleteLesson(ctx context.Context, lessonID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLesson, lessonID)
	return err
}

const getLesson = `-- name: GetLesson :one
SELECT lesson_id, lesson_datetime, duration, location_id, subject_id, notes FROM lessons
WHERE lesson_id = $1 LIMIT 1
`

func (q *Queries) GetLesson(ctx context.Context, lessonID int64) (Lesson, error) {
	row := q.db.QueryRowContext(ctx, getLesson, lessonID)
	var i Lesson
	err := row.Scan(
		&i.LessonID,
		&i.LessonDatetime,
		&i.Duration,
		&i.LocationID,
		&i.SubjectID,
		&i.Notes,
	)
	return i, err
}

const listLessons = `-- name: ListLessons :many
SELECT lesson_id, lesson_datetime, duration, location_id, subject_id, notes FROM lessons
ORDER BY lesson_datetime
LIMIT $1
OFFSET $2
`

type ListLessonsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLessons(ctx context.Context, arg ListLessonsParams) ([]Lesson, error) {
	rows, err := q.db.QueryContext(ctx, listLessons, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lesson{}
	for rows.Next() {
		var i Lesson
		if err := rows.Scan(
			&i.LessonID,
			&i.LessonDatetime,
			&i.Duration,
			&i.LocationID,
			&i.SubjectID,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLesson = `-- name: UpdateLesson :exec
UPDATE lessons
  set   lesson_datetime = $2, 
        duration = $3,
        location_id = $4, 
        subject_id =  $5,
        notes = $6
WHERE lesson_id = $1
`

type UpdateLessonParams struct {
	LessonID       int64          `json:"lesson_id"`
	LessonDatetime time.Time      `json:"lesson_datetime"`
	Duration       int64          `json:"duration"`
	LocationID     int64          `json:"location_id"`
	SubjectID      int64          `json:"subject_id"`
	Notes          sql.NullString `json:"notes"`
}

func (q *Queries) UpdateLesson(ctx context.Context, arg UpdateLessonParams) error {
	_, err := q.db.ExecContext(ctx, updateLesson,
		arg.LessonID,
		arg.LessonDatetime,
		arg.Duration,
		arg.LocationID,
		arg.SubjectID,
		arg.Notes,
	)
	return err
}
