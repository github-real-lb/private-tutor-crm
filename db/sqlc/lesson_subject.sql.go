// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lesson_subject.sql

package db

import (
	"context"
)

const createLessonSubject = `-- name: CreateLessonSubject :one
INSERT INTO lesson_subjects (
  name
) VALUES (
  $1
)
RETURNING subject_id, name
`

func (q *Queries) CreateLessonSubject(ctx context.Context, name string) (LessonSubject, error) {
	row := q.db.QueryRowContext(ctx, createLessonSubject, name)
	var i LessonSubject
	err := row.Scan(&i.SubjectID, &i.Name)
	return i, err
}

const deleteLessonSubject = `-- name: DeleteLessonSubject :exec
DELETE FROM lesson_subjects
WHERE subject_id = $1
`

func (q *Queries) DeleteLessonSubject(ctx context.Context, subjectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLessonSubject, subjectID)
	return err
}

const getLessonSubject = `-- name: GetLessonSubject :one
SELECT subject_id, name FROM lesson_subjects
WHERE subject_id = $1 LIMIT 1
`

func (q *Queries) GetLessonSubject(ctx context.Context, subjectID int64) (LessonSubject, error) {
	row := q.db.QueryRowContext(ctx, getLessonSubject, subjectID)
	var i LessonSubject
	err := row.Scan(&i.SubjectID, &i.Name)
	return i, err
}

const listLessonSubjects = `-- name: ListLessonSubjects :many
SELECT subject_id, name FROM lesson_subjects
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListLessonSubjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLessonSubjects(ctx context.Context, arg ListLessonSubjectsParams) ([]LessonSubject, error) {
	rows, err := q.db.QueryContext(ctx, listLessonSubjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LessonSubject
	for rows.Next() {
		var i LessonSubject
		if err := rows.Scan(&i.SubjectID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLessonSubject = `-- name: UpdateLessonSubject :exec
UPDATE lesson_subjects
  set name = $2
WHERE subject_id = $1
`

type UpdateLessonSubjectParams struct {
	SubjectID int64  `json:"subject_id"`
	Name      string `json:"name"`
}

func (q *Queries) UpdateLessonSubject(ctx context.Context, arg UpdateLessonSubjectParams) error {
	_, err := q.db.ExecContext(ctx, updateLessonSubject, arg.SubjectID, arg.Name)
	return err
}
