// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment_method.sql

package db

import (
	"context"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (
  name
) VALUES (
  $1
)
RETURNING payment_method_id, name
`

func (q *Queries) CreatePaymentMethod(ctx context.Context, name string) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod, name)
	var i PaymentMethod
	err := row.Scan(&i.PaymentMethodID, &i.Name)
	return i, err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM payment_methods
WHERE payment_method_id = $1
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, paymentMethodID int64) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, paymentMethodID)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT payment_method_id, name FROM payment_methods
WHERE payment_method_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentMethod(ctx context.Context, paymentMethodID int64) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethod, paymentMethodID)
	var i PaymentMethod
	err := row.Scan(&i.PaymentMethodID, &i.Name)
	return i, err
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT payment_method_id, name FROM payment_methods
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListPaymentMethodsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaymentMethods(ctx context.Context, arg ListPaymentMethodsParams) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethods, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(&i.PaymentMethodID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :exec
UPDATE payment_methods
  set name = $2
WHERE payment_method_id = $1
`

type UpdatePaymentMethodParams struct {
	PaymentMethodID int64  `json:"payment_method_id"`
	Name            string `json:"name"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentMethod, arg.PaymentMethodID, arg.Name)
	return err
}
