// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: funnel.sql

package db

import (
	"context"
)

const createFunnel = `-- name: CreateFunnel :one
INSERT INTO funnels (
  name
) VALUES (
  $1
)
RETURNING funnel_id, name
`

func (q *Queries) CreateFunnel(ctx context.Context, name string) (Funnel, error) {
	row := q.db.QueryRowContext(ctx, createFunnel, name)
	var i Funnel
	err := row.Scan(&i.FunnelID, &i.Name)
	return i, err
}

const deleteFunnel = `-- name: DeleteFunnel :exec
DELETE FROM funnels
WHERE funnel_id = $1
`

func (q *Queries) DeleteFunnel(ctx context.Context, funnelID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFunnel, funnelID)
	return err
}

const getFunnel = `-- name: GetFunnel :one
SELECT funnel_id, name FROM funnels
WHERE funnel_id = $1 LIMIT 1
`

func (q *Queries) GetFunnel(ctx context.Context, funnelID int64) (Funnel, error) {
	row := q.db.QueryRowContext(ctx, getFunnel, funnelID)
	var i Funnel
	err := row.Scan(&i.FunnelID, &i.Name)
	return i, err
}

const listFunnels = `-- name: ListFunnels :many
SELECT funnel_id, name FROM funnels
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListFunnelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFunnels(ctx context.Context, arg ListFunnelsParams) ([]Funnel, error) {
	rows, err := q.db.QueryContext(ctx, listFunnels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Funnel{}
	for rows.Next() {
		var i Funnel
		if err := rows.Scan(&i.FunnelID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFunnel = `-- name: UpdateFunnel :exec
UPDATE funnels
  set name = $2
WHERE funnel_id = $1
`

type UpdateFunnelParams struct {
	FunnelID int64  `json:"funnel_id"`
	Name     string `json:"name"`
}

func (q *Queries) UpdateFunnel(ctx context.Context, arg UpdateFunnelParams) error {
	_, err := q.db.ExecContext(ctx, updateFunnel, arg.FunnelID, arg.Name)
	return err
}
