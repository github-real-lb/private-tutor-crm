// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
  first_name, last_name, phone_number, email_address, college_id, funnel_id, notes
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING student_id, first_name, last_name, phone_number, email_address, college_id, funnel_id, notes, created_at
`

type CreateStudentParams struct {
	FirstName    string         `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	EmailAddress sql.NullString `json:"email_address"`
	CollegeID    sql.NullInt32  `json:"college_id"`
	FunnelID     sql.NullInt32  `json:"funnel_id"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.CollegeID,
		arg.FunnelID,
		arg.Notes,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CollegeID,
		&i.FunnelID,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, first_name, last_name, phone_number, email_address, college_id, funnel_id, notes, created_at FROM students
WHERE student_id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, studentID int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CollegeID,
		&i.FunnelID,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, first_name, last_name, phone_number, email_address, college_id, funnel_id, notes, created_at FROM students
ORDER BY last_name, first_name
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.EmailAddress,
			&i.CollegeID,
			&i.FunnelID,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
