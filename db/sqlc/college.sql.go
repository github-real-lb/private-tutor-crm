// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: college.sql

package db

import (
	"context"
)

const createCollege = `-- name: CreateCollege :one
INSERT INTO colleges (
  name
) VALUES (
  $1
)
RETURNING college_id, name
`

func (q *Queries) CreateCollege(ctx context.Context, name string) (*College, error) {
	row := q.db.QueryRowContext(ctx, createCollege, name)
	var i College
	err := row.Scan(&i.CollegeID, &i.Name)
	return &i, err
}

const deleteCollege = `-- name: DeleteCollege :exec
DELETE FROM colleges
WHERE college_id = $1
`

func (q *Queries) DeleteCollege(ctx context.Context, collegeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCollege, collegeID)
	return err
}

const getCollege = `-- name: GetCollege :one
SELECT college_id, name FROM colleges
WHERE college_id = $1 LIMIT 1
`

func (q *Queries) GetCollege(ctx context.Context, collegeID int64) (*College, error) {
	row := q.db.QueryRowContext(ctx, getCollege, collegeID)
	var i College
	err := row.Scan(&i.CollegeID, &i.Name)
	return &i, err
}

const listColleges = `-- name: ListColleges :many
SELECT college_id, name FROM colleges
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListCollegesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListColleges(ctx context.Context, arg ListCollegesParams) ([]*College, error) {
	rows, err := q.db.QueryContext(ctx, listColleges, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*College{}
	for rows.Next() {
		var i College
		if err := rows.Scan(&i.CollegeID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollege = `-- name: UpdateCollege :exec
UPDATE colleges
  set name = $2
WHERE college_id = $1
`

type UpdateCollegeParams struct {
	CollegeID int64  `json:"college_id"`
	Name      string `json:"name"`
}

func (q *Queries) UpdateCollege(ctx context.Context, arg UpdateCollegeParams) error {
	_, err := q.db.ExecContext(ctx, updateCollege, arg.CollegeID, arg.Name)
	return err
}
