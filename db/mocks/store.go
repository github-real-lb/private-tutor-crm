// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/github-real-lb/tutor-management-web/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// CreateCollege provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateCollege(ctx context.Context, name string) (*db.College, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollege")
	}

	var r0 *db.College
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.College, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.College); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.College)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunnel provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateFunnel(ctx context.Context, name string) (*db.Funnel, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunnel")
	}

	var r0 *db.Funnel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.Funnel, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.Funnel); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Funnel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoice provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateInvoice(ctx context.Context, arg db.CreateInvoiceParams) (*db.Invoice, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 *db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateInvoiceParams) (*db.Invoice, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateInvoiceParams) *db.Invoice); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateInvoiceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLesson provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateLesson(ctx context.Context, arg db.CreateLessonParams) (*db.Lesson, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLesson")
	}

	var r0 *db.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateLessonParams) (*db.Lesson, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateLessonParams) *db.Lesson); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateLessonParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLessonLocation provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateLessonLocation(ctx context.Context, name string) (*db.LessonLocation, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateLessonLocation")
	}

	var r0 *db.LessonLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.LessonLocation, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.LessonLocation); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.LessonLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLessonSubject provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateLessonSubject(ctx context.Context, name string) (*db.LessonSubject, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateLessonSubject")
	}

	var r0 *db.LessonSubject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.LessonSubject, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.LessonSubject); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.LessonSubject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLessonWithInvoicesTx provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateLessonWithInvoicesTx(ctx context.Context, arg db.CreateLessonTxParams) (db.LessonWithInvoices, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLessonWithInvoicesTx")
	}

	var r0 db.LessonWithInvoices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateLessonTxParams) (db.LessonWithInvoices, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateLessonTxParams) db.LessonWithInvoices); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.LessonWithInvoices)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateLessonTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreatePayment(ctx context.Context, arg db.CreatePaymentParams) (*db.Payment, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *db.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreatePaymentParams) (*db.Payment, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreatePaymentParams) *db.Payment); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreatePaymentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaymentMethod provides a mock function with given fields: ctx, name
func (_m *MockStore) CreatePaymentMethod(ctx context.Context, name string) (*db.PaymentMethod, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentMethod")
	}

	var r0 *db.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.PaymentMethod, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.PaymentMethod); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceipt provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateReceipt(ctx context.Context, arg db.CreateReceiptParams) (*db.Receipt, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceipt")
	}

	var r0 *db.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReceiptParams) (*db.Receipt, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReceiptParams) *db.Receipt); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateReceiptParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiptWithPaymentsTx provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateReceiptWithPaymentsTx(ctx context.Context, arg db.CreateReceiptTxParams) (db.ReceiptWithPayments, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptWithPaymentsTx")
	}

	var r0 db.ReceiptWithPayments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReceiptTxParams) (db.ReceiptWithPayments, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReceiptTxParams) db.ReceiptWithPayments); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ReceiptWithPayments)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateReceiptTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStudent provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateStudent(ctx context.Context, arg db.CreateStudentParams) (*db.Student, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudent")
	}

	var r0 *db.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStudentParams) (*db.Student, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStudentParams) *db.Student); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateStudentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollege provides a mock function with given fields: ctx, collegeID
func (_m *MockStore) DeleteCollege(ctx context.Context, collegeID int64) error {
	ret := _m.Called(ctx, collegeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollege")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, collegeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFunnel provides a mock function with given fields: ctx, funnelID
func (_m *MockStore) DeleteFunnel(ctx context.Context, funnelID int64) error {
	ret := _m.Called(ctx, funnelID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunnel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, funnelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoice provides a mock function with given fields: ctx, invoiceID
func (_m *MockStore) DeleteInvoice(ctx context.Context, invoiceID int64) error {
	ret := _m.Called(ctx, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoicesByLesson provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) DeleteInvoicesByLesson(ctx context.Context, lessonID int64) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoicesByLesson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLesson provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) DeleteLesson(ctx context.Context, lessonID int64) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLesson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLessonLocation provides a mock function with given fields: ctx, locationID
func (_m *MockStore) DeleteLessonLocation(ctx context.Context, locationID int64) error {
	ret := _m.Called(ctx, locationID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLessonLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, locationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLessonSubject provides a mock function with given fields: ctx, subjectID
func (_m *MockStore) DeleteLessonSubject(ctx context.Context, subjectID int64) error {
	ret := _m.Called(ctx, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLessonSubject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, subjectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLessonWithInvoicesTx provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) DeleteLessonWithInvoicesTx(ctx context.Context, lessonID int64) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLessonWithInvoicesTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePayment provides a mock function with given fields: ctx, paymentID
func (_m *MockStore) DeletePayment(ctx context.Context, paymentID int64) error {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentMethod provides a mock function with given fields: ctx, paymentMethodID
func (_m *MockStore) DeletePaymentMethod(ctx context.Context, paymentMethodID int64) error {
	ret := _m.Called(ctx, paymentMethodID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePaymentMethod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, paymentMethodID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentsByReceipt provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) DeletePaymentsByReceipt(ctx context.Context, receiptID int64) error {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePaymentsByReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, receiptID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReceipt provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) DeleteReceipt(ctx context.Context, receiptID int64) error {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, receiptID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReceiptWithPaymentsTx provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) DeleteReceiptWithPaymentsTx(ctx context.Context, receiptID int64) error {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptWithPaymentsTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, receiptID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStudent provides a mock function with given fields: ctx, studentID
func (_m *MockStore) DeleteStudent(ctx context.Context, studentID int64) error {
	ret := _m.Called(ctx, studentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, studentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCollege provides a mock function with given fields: ctx, collegeID
func (_m *MockStore) GetCollege(ctx context.Context, collegeID int64) (*db.College, error) {
	ret := _m.Called(ctx, collegeID)

	if len(ret) == 0 {
		panic("no return value specified for GetCollege")
	}

	var r0 *db.College
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.College, error)); ok {
		return rf(ctx, collegeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.College); ok {
		r0 = rf(ctx, collegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.College)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, collegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunnel provides a mock function with given fields: ctx, funnelID
func (_m *MockStore) GetFunnel(ctx context.Context, funnelID int64) (*db.Funnel, error) {
	ret := _m.Called(ctx, funnelID)

	if len(ret) == 0 {
		panic("no return value specified for GetFunnel")
	}

	var r0 *db.Funnel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Funnel, error)); ok {
		return rf(ctx, funnelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Funnel); ok {
		r0 = rf(ctx, funnelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Funnel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, funnelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoice provides a mock function with given fields: ctx, invoiceID
func (_m *MockStore) GetInvoice(ctx context.Context, invoiceID int64) (*db.Invoice, error) {
	ret := _m.Called(ctx, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 *db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Invoice, error)); ok {
		return rf(ctx, invoiceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Invoice); ok {
		r0 = rf(ctx, invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoicesByLesson provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) GetInvoicesByLesson(ctx context.Context, lessonID int64) ([]*db.Invoice, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoicesByLesson")
	}

	var r0 []*db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*db.Invoice, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*db.Invoice); ok {
		r0 = rf(ctx, lessonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoicesByStudent provides a mock function with given fields: ctx, studentID
func (_m *MockStore) GetInvoicesByStudent(ctx context.Context, studentID int64) ([]*db.Invoice, error) {
	ret := _m.Called(ctx, studentID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoicesByStudent")
	}

	var r0 []*db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*db.Invoice, error)); ok {
		return rf(ctx, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*db.Invoice); ok {
		r0 = rf(ctx, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLesson provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) GetLesson(ctx context.Context, lessonID int64) (*db.Lesson, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for GetLesson")
	}

	var r0 *db.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Lesson, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Lesson); ok {
		r0 = rf(ctx, lessonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLessonLocation provides a mock function with given fields: ctx, locationID
func (_m *MockStore) GetLessonLocation(ctx context.Context, locationID int64) (*db.LessonLocation, error) {
	ret := _m.Called(ctx, locationID)

	if len(ret) == 0 {
		panic("no return value specified for GetLessonLocation")
	}

	var r0 *db.LessonLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.LessonLocation, error)); ok {
		return rf(ctx, locationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.LessonLocation); ok {
		r0 = rf(ctx, locationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.LessonLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, locationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLessonSubject provides a mock function with given fields: ctx, subjectID
func (_m *MockStore) GetLessonSubject(ctx context.Context, subjectID int64) (*db.LessonSubject, error) {
	ret := _m.Called(ctx, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for GetLessonSubject")
	}

	var r0 *db.LessonSubject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.LessonSubject, error)); ok {
		return rf(ctx, subjectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.LessonSubject); ok {
		r0 = rf(ctx, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.LessonSubject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLessonWithInvoicesTx provides a mock function with given fields: ctx, lessonID
func (_m *MockStore) GetLessonWithInvoicesTx(ctx context.Context, lessonID int64) (db.LessonWithInvoices, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for GetLessonWithInvoicesTx")
	}

	var r0 db.LessonWithInvoices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.LessonWithInvoices, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.LessonWithInvoices); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Get(0).(db.LessonWithInvoices)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: ctx, paymentID
func (_m *MockStore) GetPayment(ctx context.Context, paymentID int64) (*db.Payment, error) {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 *db.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Payment, error)); ok {
		return rf(ctx, paymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Payment); ok {
		r0 = rf(ctx, paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethod provides a mock function with given fields: ctx, paymentMethodID
func (_m *MockStore) GetPaymentMethod(ctx context.Context, paymentMethodID int64) (*db.PaymentMethod, error) {
	ret := _m.Called(ctx, paymentMethodID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentMethod")
	}

	var r0 *db.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.PaymentMethod, error)); ok {
		return rf(ctx, paymentMethodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.PaymentMethod); ok {
		r0 = rf(ctx, paymentMethodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, paymentMethodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayments provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) GetPayments(ctx context.Context, receiptID int64) ([]*db.Payment, error) {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayments")
	}

	var r0 []*db.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*db.Payment, error)); ok {
		return rf(ctx, receiptID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*db.Payment); ok {
		r0 = rf(ctx, receiptID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, receiptID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceipt provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) GetReceipt(ctx context.Context, receiptID int64) (*db.Receipt, error) {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for GetReceipt")
	}

	var r0 *db.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Receipt, error)); ok {
		return rf(ctx, receiptID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Receipt); ok {
		r0 = rf(ctx, receiptID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, receiptID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiptWithPaymentsTx provides a mock function with given fields: ctx, receiptID
func (_m *MockStore) GetReceiptWithPaymentsTx(ctx context.Context, receiptID int64) (db.ReceiptWithPayments, error) {
	ret := _m.Called(ctx, receiptID)

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptWithPaymentsTx")
	}

	var r0 db.ReceiptWithPayments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.ReceiptWithPayments, error)); ok {
		return rf(ctx, receiptID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.ReceiptWithPayments); ok {
		r0 = rf(ctx, receiptID)
	} else {
		r0 = ret.Get(0).(db.ReceiptWithPayments)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, receiptID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiptsByStudent provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetReceiptsByStudent(ctx context.Context, arg db.GetReceiptsByStudentParams) ([]*db.Receipt, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptsByStudent")
	}

	var r0 []*db.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetReceiptsByStudentParams) ([]*db.Receipt, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetReceiptsByStudentParams) []*db.Receipt); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetReceiptsByStudentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiptsWithPaymentsByStudentTx provides a mock function with given fields: ctx, studentID, limit, offset
func (_m *MockStore) GetReceiptsWithPaymentsByStudentTx(ctx context.Context, studentID int64, limit int, offset int) (db.StudentReceiptsWithPayments, error) {
	ret := _m.Called(ctx, studentID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptsWithPaymentsByStudentTx")
	}

	var r0 db.StudentReceiptsWithPayments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) (db.StudentReceiptsWithPayments, error)); ok {
		return rf(ctx, studentID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) db.StudentReceiptsWithPayments); ok {
		r0 = rf(ctx, studentID, limit, offset)
	} else {
		r0 = ret.Get(0).(db.StudentReceiptsWithPayments)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, studentID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudent provides a mock function with given fields: ctx, studentID
func (_m *MockStore) GetStudent(ctx context.Context, studentID int64) (*db.Student, error) {
	ret := _m.Called(ctx, studentID)

	if len(ret) == 0 {
		panic("no return value specified for GetStudent")
	}

	var r0 *db.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*db.Student, error)); ok {
		return rf(ctx, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Student); ok {
		r0 = rf(ctx, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListColleges provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListColleges(ctx context.Context, arg db.ListCollegesParams) ([]*db.College, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListColleges")
	}

	var r0 []*db.College
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListCollegesParams) ([]*db.College, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListCollegesParams) []*db.College); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.College)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListCollegesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunnels provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListFunnels(ctx context.Context, arg db.ListFunnelsParams) ([]*db.Funnel, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListFunnels")
	}

	var r0 []*db.Funnel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListFunnelsParams) ([]*db.Funnel, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListFunnelsParams) []*db.Funnel); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Funnel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListFunnelsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoices provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListInvoices(ctx context.Context, arg db.ListInvoicesParams) ([]*db.Invoice, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoices")
	}

	var r0 []*db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListInvoicesParams) ([]*db.Invoice, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListInvoicesParams) []*db.Invoice); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListInvoicesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLessonLocations provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListLessonLocations(ctx context.Context, arg db.ListLessonLocationsParams) ([]*db.LessonLocation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLessonLocations")
	}

	var r0 []*db.LessonLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonLocationsParams) ([]*db.LessonLocation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonLocationsParams) []*db.LessonLocation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.LessonLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListLessonLocationsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLessonSubjects provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListLessonSubjects(ctx context.Context, arg db.ListLessonSubjectsParams) ([]*db.LessonSubject, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLessonSubjects")
	}

	var r0 []*db.LessonSubject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonSubjectsParams) ([]*db.LessonSubject, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonSubjectsParams) []*db.LessonSubject); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.LessonSubject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListLessonSubjectsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLessons provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListLessons(ctx context.Context, arg db.ListLessonsParams) ([]*db.Lesson, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLessons")
	}

	var r0 []*db.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonsParams) ([]*db.Lesson, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLessonsParams) []*db.Lesson); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListLessonsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPaymentMethods provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListPaymentMethods(ctx context.Context, arg db.ListPaymentMethodsParams) ([]*db.PaymentMethod, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentMethods")
	}

	var r0 []*db.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPaymentMethodsParams) ([]*db.PaymentMethod, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPaymentMethodsParams) []*db.PaymentMethod); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListPaymentMethodsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPayments provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListPayments(ctx context.Context, arg db.ListPaymentsParams) ([]*db.Payment, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListPayments")
	}

	var r0 []*db.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPaymentsParams) ([]*db.Payment, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPaymentsParams) []*db.Payment); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListPaymentsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceipts provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListReceipts(ctx context.Context, arg db.ListReceiptsParams) ([]*db.Receipt, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListReceipts")
	}

	var r0 []*db.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReceiptsParams) ([]*db.Receipt, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReceiptsParams) []*db.Receipt); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListReceiptsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudents provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListStudents(ctx context.Context, arg db.ListStudentsParams) ([]*db.Student, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListStudents")
	}

	var r0 []*db.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStudentsParams) ([]*db.Student, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStudentsParams) []*db.Student); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListStudentsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollege provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateCollege(ctx context.Context, arg db.UpdateCollegeParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollege")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateCollegeParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFunnel provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateFunnel(ctx context.Context, arg db.UpdateFunnelParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunnel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateFunnelParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvoice provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateInvoice(ctx context.Context, arg db.UpdateInvoiceParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateInvoiceParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLesson provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateLesson(ctx context.Context, arg db.UpdateLessonParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLesson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateLessonParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLessonLocation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateLessonLocation(ctx context.Context, arg db.UpdateLessonLocationParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLessonLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateLessonLocationParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLessonSubject provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateLessonSubject(ctx context.Context, arg db.UpdateLessonSubjectParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLessonSubject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateLessonSubjectParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayment provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdatePayment(ctx context.Context, arg db.UpdatePaymentParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatePaymentParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentMethod provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdatePaymentMethod(ctx context.Context, arg db.UpdatePaymentMethodParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentMethod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatePaymentMethodParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReceipt provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateReceipt(ctx context.Context, arg db.UpdateReceiptParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateReceiptParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReceiptAmount provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateReceiptAmount(ctx context.Context, arg db.UpdateReceiptAmountParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceiptAmount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateReceiptAmountParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudent provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateStudent(ctx context.Context, arg db.UpdateStudentParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStudentParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
